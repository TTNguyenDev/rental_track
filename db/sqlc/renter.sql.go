// Code generated by sqlc. DO NOT EDIT.
// source: renter.sql

package db

import (
	"context"
)

const createRenter = `-- name: CreateRenter :one
INSERT INTO renter (
    full_name
  ) VALUES (
      $1
) RETURNING id, full_name
`

func (q *Queries) CreateRenter(ctx context.Context, fullName string) (Renter, error) {
	row := q.db.QueryRowContext(ctx, createRenter, fullName)
	var i Renter
	err := row.Scan(&i.ID, &i.FullName)
	return i, err
}

const deleteRenter = `-- name: DeleteRenter :one

DELETE FROM renter
WHERE id = $1
RETURNING id, full_name
`

// DO NOT ALLOW CHANGE RENTER NAME
func (q *Queries) DeleteRenter(ctx context.Context, id int32) (Renter, error) {
	row := q.db.QueryRowContext(ctx, deleteRenter, id)
	var i Renter
	err := row.Scan(&i.ID, &i.FullName)
	return i, err
}

const getRenter = `-- name: GetRenter :one
SELECT id, full_name FROM renter
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRenter(ctx context.Context, id int32) (Renter, error) {
	row := q.db.QueryRowContext(ctx, getRenter, id)
	var i Renter
	err := row.Scan(&i.ID, &i.FullName)
	return i, err
}

const getRenters = `-- name: GetRenters :many
SELECT id, full_name FROM renter
ORDER BY full_name
LIMIT $1
OFFSET $2
`

type GetRentersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetRenters(ctx context.Context, arg GetRentersParams) ([]Renter, error) {
	rows, err := q.db.QueryContext(ctx, getRenters, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Renter
	for rows.Next() {
		var i Renter
		if err := rows.Scan(&i.ID, &i.FullName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
