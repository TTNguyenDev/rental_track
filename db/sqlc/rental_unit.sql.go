// Code generated by sqlc. DO NOT EDIT.
// source: rental_unit.sql

package db

import (
	"context"
)

const createRentalUnit = `-- name: CreateRentalUnit :one
INSERT INTO rental_unit (
  house_id,
  price,
  status
) VALUES (
  $1, $2, $3
) RETURNING id, house_id, price, status, updated_at
`

type CreateRentalUnitParams struct {
	HouseID int32        `json:"house_id"`
	Price   string       `json:"price"`
	Status  Rentalstatus `json:"status"`
}

func (q *Queries) CreateRentalUnit(ctx context.Context, arg CreateRentalUnitParams) (RentalUnit, error) {
	row := q.db.QueryRowContext(ctx, createRentalUnit, arg.HouseID, arg.Price, arg.Status)
	var i RentalUnit
	err := row.Scan(
		&i.ID,
		&i.HouseID,
		&i.Price,
		&i.Status,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteRentalUnit = `-- name: DeleteRentalUnit :one
DELETE FROM rental_unit 
WHERE id = $1
RETURNING id, house_id, price, status, updated_at
`

func (q *Queries) DeleteRentalUnit(ctx context.Context, id int32) (RentalUnit, error) {
	row := q.db.QueryRowContext(ctx, deleteRentalUnit, id)
	var i RentalUnit
	err := row.Scan(
		&i.ID,
		&i.HouseID,
		&i.Price,
		&i.Status,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteRentalUnitsByHouse = `-- name: DeleteRentalUnitsByHouse :many
DELETE FROM rental_unit
WHERE house_id = $1
RETURNING id
`

func (q *Queries) DeleteRentalUnitsByHouse(ctx context.Context, houseID int32) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, deleteRentalUnitsByHouse, houseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int32{}
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRentalUnit = `-- name: GetRentalUnit :one
SELECT id, house_id, price, status, updated_at FROM rental_unit 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRentalUnit(ctx context.Context, id int32) (RentalUnit, error) {
	row := q.db.QueryRowContext(ctx, getRentalUnit, id)
	var i RentalUnit
	err := row.Scan(
		&i.ID,
		&i.HouseID,
		&i.Price,
		&i.Status,
		&i.UpdatedAt,
	)
	return i, err
}

const getRentalUnitsByHouse = `-- name: GetRentalUnitsByHouse :many
SELECT id, house_id, price, status, updated_at FROM rental_unit 
WHERE house_id = $1
ORDER BY price
LIMIT $1
OFFSET $2
`

type GetRentalUnitsByHouseParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetRentalUnitsByHouse(ctx context.Context, arg GetRentalUnitsByHouseParams) ([]RentalUnit, error) {
	rows, err := q.db.QueryContext(ctx, getRentalUnitsByHouse, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []RentalUnit{}
	for rows.Next() {
		var i RentalUnit
		if err := rows.Scan(
			&i.ID,
			&i.HouseID,
			&i.Price,
			&i.Status,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRentalUnit = `-- name: UpdateRentalUnit :one
UPDATE rental_unit
SET price = $1, status = $2
WHERE id = $3
RETURNING id, house_id, price, status, updated_at
`

type UpdateRentalUnitParams struct {
	Price  string       `json:"price"`
	Status Rentalstatus `json:"status"`
	ID     int32        `json:"id"`
}

func (q *Queries) UpdateRentalUnit(ctx context.Context, arg UpdateRentalUnitParams) (RentalUnit, error) {
	row := q.db.QueryRowContext(ctx, updateRentalUnit, arg.Price, arg.Status, arg.ID)
	var i RentalUnit
	err := row.Scan(
		&i.ID,
		&i.HouseID,
		&i.Price,
		&i.Status,
		&i.UpdatedAt,
	)
	return i, err
}
