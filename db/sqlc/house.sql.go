// Code generated by sqlc. DO NOT EDIT.
// source: house.sql

package db

import (
	"context"
)

const createHouse = `-- name: CreateHouse :one
INSERT INTO house (
  name,
  address,
  kind
) VALUES (
  $1, $2, $3
) RETURNING id, name, address, kind, created_at, updated_at
`

type CreateHouseParams struct {
	Name    string    `json:"name"`
	Address string    `json:"address"`
	Kind    Housekind `json:"kind"`
}

func (q *Queries) CreateHouse(ctx context.Context, arg CreateHouseParams) (House, error) {
	row := q.db.QueryRowContext(ctx, createHouse, arg.Name, arg.Address, arg.Kind)
	var i House
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Kind,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteHouse = `-- name: DeleteHouse :one
/*
TODO: Delete Rental_unit, rental agreement before delete the house
 */
DELETE FROM house
WHERE id = $1
RETURNING id, name, address, kind, created_at, updated_at
`

func (q *Queries) DeleteHouse(ctx context.Context, id int32) (House, error) {
	row := q.db.QueryRowContext(ctx, deleteHouse, id)
	var i House
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Kind,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getHouse = `-- name: GetHouse :one
SELECT id, name, address, kind, created_at, updated_at FROM house 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetHouse(ctx context.Context, id int32) (House, error) {
	row := q.db.QueryRowContext(ctx, getHouse, id)
	var i House
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Kind,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getHouses = `-- name: GetHouses :many
SELECT id, name, address, kind, created_at, updated_at FROM house 
ORDER BY name
LIMIT $1
OFFSET $2
`

type GetHousesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetHouses(ctx context.Context, arg GetHousesParams) ([]House, error) {
	rows, err := q.db.QueryContext(ctx, getHouses, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []House{}
	for rows.Next() {
		var i House
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.Kind,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHouseInfo = `-- name: UpdateHouseInfo :one
UPDATE house 
SET name = $1, address = $2
WHERE id = $3 
RETURNING id, name, address, kind, created_at, updated_at
`

type UpdateHouseInfoParams struct {
	Name    string `json:"name"`
	Address string `json:"address"`
	ID      int32  `json:"id"`
}

func (q *Queries) UpdateHouseInfo(ctx context.Context, arg UpdateHouseInfoParams) (House, error) {
	row := q.db.QueryRowContext(ctx, updateHouseInfo, arg.Name, arg.Address, arg.ID)
	var i House
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Kind,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
